name: Deploy to Staging (EC2)

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: main-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure backend folder permissions
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.EC2_USER }}/backend
            sudo chown -R $USER:$USER /home/${{ secrets.EC2_USER }}/backend
            sudo chmod -R u+rwX /home/${{ secrets.EC2_USER }}/backend

      - name: Upload project to EC2 (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: .
          target: /home/${{ secrets.EC2_USER }}/backend
          overwrite: true
          rm: true   # Optional: cleans up old files before upload

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          envs: APP_DIR
          script: |
            set -e  # stop if any command fails

            cd /home/${{ secrets.EC2_USER }}/backend

            # Setup Python environment
            python3 -m venv .venv || true
            source .venv/bin/activate

            python -m pip install --upgrade pip
            pip install -r requirements.txt

            # Stop old server if running
            fuser -k 8000/tcp || true

            # Start server in background
            nohup python manage.py runserver 0.0.0.0:8000 > logs.out 2>&1 &

            echo "âœ… Deployment complete and server restarted!"
